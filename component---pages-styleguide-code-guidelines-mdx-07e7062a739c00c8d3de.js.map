{"version":3,"sources":["webpack:///../pages/styleguide/code-guidelines.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","size","margin","marginLargest","marginLarger","href","target","marginSmallest","isMDXComponent"],"mappings":"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","file":"component---pages-styleguide-code-guidelines-mdx-07e7062a739c00c8d3de.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/cjpablo/Backlot/webapp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { BlcH1, BlcH2, BlcH3, BlcH4, BlcH5, BlcH6 } from '../../components/BlcTitle';\nimport { BlcContainer, BlcRow, BlcColumn } from '../../components/BlcGrid';\nimport { BlcParagraph, BlcLink, BlcCode, Bold, Italic, Br } from '../../components/BlcText';\nimport { size } from '../../public/styles';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <BlcContainer size=\"smaller\" mdxType=\"BlcContainer\">\n\t<BlcH2 margin={size.marginLargest} mdxType=\"BlcH2\">Code guidelines</BlcH2>\n      <BlcParagraph mdxType=\"BlcParagraph\">As BacklotCars continues to grow, both as a product and a company, one challenge we are faced with is learning how to refine the code quality and apply it cohesively to each of our products. We created this code guidelines to act as a central location where we store all the data collected, code snippets, developer tips and more. Anyone working on the BacklotCars products is encouraged to stay familiar with this styleguide and help ensure that it is kept up-to-date.</BlcParagraph>\n\n      <BlcH4 margin={size.marginLarger} mdxType=\"BlcH4\">Airbnb React/JSX Style Guide</BlcH4>\n      <BlcParagraph mdxType=\"BlcParagraph\"><BlcLink href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" mdxType=\"BlcLink\">Read more about this style guide.</BlcLink></BlcParagraph>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t<Italic mdxType=\"Italic\">A mostly reasonable approach to React and JSX</Italic>\n      </BlcParagraph>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">This style guide is mostly based on the standards that are currently prevalent in JavaScript, although some conventions (i.e async/await or static class fields) may still be included or prohibited on a case-by-case basis. Currently, anything prior to stage 3 is not included nor recommended in this guide.</BlcParagraph>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">Table of Contents\n\t1. [Basic Rules](#basic-rules)\n\t1. [Class vs <BlcCode mdxType=\"BlcCode\">React.createClass</BlcCode> vs stateless](#class-vs-reactcreateclass-vs-stateless)\n\t1. [Mixins](#mixins)\n\t1. [Naming](#naming)\n\t1. [Declaration](#declaration)\n\t1. [Alignment](#alignment)\n\t1. [Quotes](#quotes)\n\t1. [Spacing](#spacing)\n\t1. [Props](#props)\n\t1. [Refs](#refs)\n\t1. [Parentheses](#parentheses)\n\t1. [Tags](#tags)\n\t1. [Methods](#methods)\n\t1. [Ordering](#ordering)\n\t1. [<BlcCode mdxType=\"BlcCode\">isMounted</BlcCode>](#ismounted)\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Basic Rules</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Only include one React component per file.\n\t\t- However, multiple <BlcLink href=\"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions\" target=\"_blank\" mdxType=\"BlcLink\">Stateless, or Pure, Components</BlcLink> are allowed per file. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/no-multi-comp</BlcCode></BlcLink>.\n\t- Always use JSX syntax.\n\t- Do not use <BlcCode mdxType=\"BlcCode\">React.createElement</BlcCode> unless you’re initializing the app from a file that is not JSX.\n\t- <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/forbid-prop-types</BlcCode></BlcLink> will allow <BlcCode mdxType=\"BlcCode\">arrays</BlcCode> and <BlcCode mdxType=\"BlcCode\">objects</BlcCode> only if it is explicitly noted what <BlcCode mdxType=\"BlcCode\">array</BlcCode> and <BlcCode mdxType=\"BlcCode\">object</BlcCode> contains, using <BlcCode mdxType=\"BlcCode\">arrayOf</BlcCode>, <BlcCode mdxType=\"BlcCode\">objectOf</BlcCode>, or <BlcCode mdxType=\"BlcCode\">shape</BlcCode>.\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Class vs <BlcCode mdxType=\"BlcCode\">React.createClass</BlcCode> vs stateless</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- If you have internal state and/or refs, prefer <BlcCode mdxType=\"BlcCode\">class extends React.Component</BlcCode> over <BlcCode mdxType=\"BlcCode\">React.createClass</BlcCode>. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/prefer-es6-class</BlcCode></BlcLink> <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/prefer-stateless-function</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\tconst Listing = React.createClass({\n\t\t\t// ...\n\t\t\trender() {\n\t\t\t\treturn <div>{this.state.hello}</div>;\n\t\t\t}\n\t\t});\n\n\t\t// good\n\t\tclass Listing extends React.Component {\n\t\t\t// ...\n\t\t\trender() {\n\t\t\t\treturn <div>{this.state.hello}</div>;\n\t\t\t}\n\t\t}\n\t`}\n\t</BlcCode>\n\n\tAnd if you don’t have state or refs, prefer normal functions (not arrow functions) over classes:\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\tclass Listing extends React.Component {\n\t\t\trender() {\n\t\t\t\treturn <div>{this.props.hello}</div>;\n\t\t\t}\n\t\t}\n\n\t\t// bad (relying on function name inference is discouraged)\n\t\tconst Listing = ({ hello }) => (\n\t\t\t<div>{hello}</div>\n\t\t);\n\n\t\t// good\n\t\tfunction Listing({ hello }) {\n\t\t\treturn <div>{hello}</div>;\n\t\t}\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Mixins</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- <BlcLink href=\"https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html\" target=\"_blank\" mdxType=\"BlcLink\">Do not use mixins</BlcLink>.\n      </BlcParagraph>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">> Why? Mixins introduce implicit dependencies, cause name clashes, and cause snowballing complexity. Most use cases for mixins can be accomplished in better ways via components, higher-order components, or utility modules.</BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Naming</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- <Bold mdxType=\"Bold\">Extensions</Bold>: Use <BlcCode mdxType=\"BlcCode\">.jsx</BlcCode> extension for React components. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-filename-extension</BlcCode></BlcLink>\n\t- <Bold mdxType=\"Bold\">Filename</Bold>: Use PascalCase for filenames. E.g., <BlcCode mdxType=\"BlcCode\">ReservationCard.jsx</BlcCode>.\n\t- <Bold mdxType=\"Bold\">Reference Naming</Bold>: Use PascalCase for React components and camelCase for their instances. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-pascal-case</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\timport reservationCard from './ReservationCard';\n\n\t\t// good\n\t\timport ReservationCard from './ReservationCard';\n\n\t\t// bad\n\t\tconst ReservationItem = <ReservationCard />;\n\n\t\t// good\n\t\tconst reservationItem = <ReservationCard />;\n\t`}\n\t</BlcCode>\n\n\t- <Bold mdxType=\"Bold\">Component Naming</Bold>: Use the filename as the component name. For example, <BlcCode mdxType=\"BlcCode\">ReservationCard.jsx</BlcCode> should have a reference name of <BlcCode mdxType=\"BlcCode\">ReservationCard</BlcCode>. However, for root components of a directory, use <BlcCode mdxType=\"BlcCode\">index.jsx</BlcCode> as the filename and use the directory name as the component name:\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\timport Footer from './Footer/Footer';\n\n\t\t// bad\n\t\timport Footer from './Footer/index';\n\n\t\t// good\n\t\timport Footer from './Footer';\n\t`}\n\t</BlcCode>\n\n\t- <Bold mdxType=\"Bold\">Higher-order Component Naming</Bold>: Use a composite of the higher-order component’s name and the passed-in component’s name as the <BlcCode mdxType=\"BlcCode\">displayName</BlcCode> on the generated component. For example, the higher-order component <BlcCode mdxType=\"BlcCode\">withFoo()</BlcCode>, when passed a component <BlcCode mdxType=\"BlcCode\">Bar</BlcCode> should produce a component with a <BlcCode mdxType=\"BlcCode\">displayName</BlcCode> of <BlcCode mdxType=\"BlcCode\">withFoo(Bar)</BlcCode>.\n\n\t> Why? A component’s <BlcCode mdxType=\"BlcCode\">displayName</BlcCode> may be used by developer tools or in error messages, and having a value that clearly expresses this relationship helps people understand what is happening.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\texport default function withFoo(WrappedComponent) {\n\t\t\treturn function WithFoo(props) {\n\t\t\t\treturn <WrappedComponent {...props} foo />;\n\t\t\t}\n\t\t}\n\n\t\t// good\n\t\texport default function withFoo(WrappedComponent) {\n\t\t\tfunction WithFoo(props) {\n\t\t\t\treturn <WrappedComponent {...props} foo />;\n\t\t\t}\n\n\t\t\tconst wrappedComponentName = WrappedComponent.displayName\n\t\t\t\t|| WrappedComponent.name\n\t\t\t\t|| 'Component';\n\n\t\t\tWithFoo.displayName = withFoo($ {wrappedComponentName});\n\t\t\treturn WithFoo;\n\t\t}\n\t`}\n\t</BlcCode>\n\n\t- <Bold mdxType=\"Bold\">Props Naming</Bold>: Avoid using DOM component prop names for different purposes.\n\n\t> Why? People expect props like <BlcCode mdxType=\"BlcCode\">style</BlcCode> and <BlcCode mdxType=\"BlcCode\">className</BlcCode> to mean one specific thing. Varying this API for a subset of your app makes the code less readable and less maintainable, and may cause bugs.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<MyComponent style=\"fancy\" />\n\n\t\t// bad\n\t\t<MyComponent className=\"fancy\" />\n\n\t\t// good\n\t\t<MyComponent variant=\"fancy\" />\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Declaration</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Do not use <BlcCode mdxType=\"BlcCode\">displayName</BlcCode> for naming components. Instead, name the component by reference.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\texport default React.createClass({\n\t\t\tdisplayName: 'ReservationCard',\n\t\t\t// stuff goes here\n\t\t});\n\n\t\t// good\n\t\texport default class ReservationCard extends React.Component {\n\t\t}\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Alignment</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Follow these alignment styles for JSX syntax. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-closing-bracket-location</BlcCode></BlcLink> <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-closing-tag-location</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo superLongParam=\"bar\"\n\t\t     anotherSuperLongParam=\"baz\" />\n\n\t\t// good\n\t\t<Foo\n\t\t\tsuperLongParam=\"bar\"\n\t\t\tanotherSuperLongParam=\"baz\"\n\t\t/>\n\n\t\t// if props fit in one line then keep it on the same line\n\t\t<Foo bar=\"bar\" />\n\n\t\t// children get indented normally\n\t\t<Foo\n\t\t\tsuperLongParam=\"bar\"\n\t\t\tanotherSuperLongParam=\"baz\"\n\t\t>\n\t\t\t<Quux />\n\t\t</Foo>\n\n\t\t// bad\n\t\t{showButton &&\n\t\t\t<Button />\n\t\t}\n\n\t\t// bad\n\t\t{\n\t\t\tshowButton &&\n\t\t\t\t<Button />\n\t\t}\n\n\t\t// good\n\t\t{showButton && (\n\t\t\t<Button />\n\t\t)}\n\n\t\t// good\n\t\t{showButton && <Button />}\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Quotes</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Always use double quotes (<BlcCode mdxType=\"BlcCode\">\"</BlcCode>) for JSX attributes, but single quotes (<BlcCode mdxType=\"BlcCode\">'</BlcCode>) for all other JS. eslint: <BlcLink href=\"https://eslint.org/docs/rules/jsx-quotes\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">jsx-quotes</BlcCode></BlcLink>\n\n\t> Why? Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo bar='bar' />\n\n\t\t// good\n\t\t<Foo bar=\"bar\" />\n\n\t\t// bad\n\t\t<Foo style={{ left: \"20px\" }} />\n\n\t\t// good\n\t\t<Foo style={{ left: '20px' }} />\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Spacing</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Always include a single space in your self-closing tag. eslint: <BlcLink href=\"https://eslint.org/docs/rules/no-multi-spaces\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">no-multi-spaces</BlcCode></BlcLink>, <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-tag-spacing</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo/>\n\n\t\t// very bad\n\t\t<Foo                 />\n\n\t\t// bad\n\t\t<Foo\n\t\t/>\n\n\t\t// good\n\t\t<Foo />\n\t`}\n\t</BlcCode>\n\n\t- Do not pad JSX curly braces with spaces. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-curly-spacing</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo bar={ baz } />\n\n\t\t// good\n\t\t<Foo bar={baz} />\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Props</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Always use camelCase for prop names.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo\n\t\t\tUserName=\"hello\"\n\t\t\tphone_number={12345678}\n\t\t/>\n\n\t\t// good\n\t\t<Foo\n\t\t\tuserName=\"hello\"\n\t\t\tphoneNumber={12345678}\n\t\t/>\n\t`}\n\t</BlcCode>\n\n\t- Omit the value of the prop when it is explicitly <BlcCode mdxType=\"BlcCode\">true</BlcCode>. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-boolean-value</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo\n\t\thidden={true}\n\t\t/>\n\n\t\t// good\n\t\t<Foo\n\t\thidden\n\t\t/>\n\n\t\t// good\n\t\t<Foo hidden />\n\t`}\n\t</BlcCode>\n\n\t- Always include an <BlcCode mdxType=\"BlcCode\">alt</BlcCode> prop on <BlcCode mdxType=\"BlcCode\">{`<img>`}</BlcCode> tags. If the image is presentational, <BlcCode mdxType=\"BlcCode\">alt</BlcCode> can be an empty string or the <BlcCode mdxType=\"BlcCode\">{`<img>`}</BlcCode> must have <BlcCode mdxType=\"BlcCode\">role=\"presentation\"</BlcCode>. eslint: <BlcLink href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/alt-text.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">jsx-a11y/alt-text</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<img src=\"hello.jpg\" />\n\n\t\t// good\n\t\t<img src=\"hello.jpg\" alt=\"Me waving hello\" />\n\n\t\t// good\n\t\t<img src=\"hello.jpg\" alt=\"\" />\n\n\t\t// good\n\t\t<img src=\"hello.jpg\" role=\"presentation\" />\n\t`}\n\t</BlcCode>\n\n\t- Do not use words like \"image\", \"photo\", or \"picture\" in <BlcCode mdxType=\"BlcCode\">{`<img>`}</BlcCode> <BlcCode mdxType=\"BlcCode\">alt</BlcCode> props. eslint: <BlcLink href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">jsx-a11y/img-redundant-alt</BlcCode></BlcLink>\n\n\t> Why? Screenreaders already announce <BlcCode mdxType=\"BlcCode\">img</BlcCode> elements as images, so there is no need to include this information in the alt text.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<img src=\"hello.jpg\" alt=\"Picture of me waving hello\" />\n\n\t\t// good\n\t\t<img src=\"hello.jpg\" alt=\"Me waving hello\" />\n\t`}\n\t</BlcCode>\n\n\t- Use only valid, non-abstract <BlcLink href=\"https://www.w3.org/TR/wai-aria/#usage_intro\" target=\"_blank\" mdxType=\"BlcLink\">ARIA roles</BlcLink>. eslint: <BlcLink href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">jsx-a11y/aria-role</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad - not an ARIA role\n\t\t<div role=\"datepicker\" />\n\n\t\t// bad - abstract ARIA role\n\t\t<div role=\"range\" />\n\n\t\t// good\n\t\t<div role=\"button\" />\n\t`}\n\t</BlcCode>\n\n\t- Do not use <BlcCode mdxType=\"BlcCode\">accessKey</BlcCode> on elements. eslint: <BlcLink href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">jsx-a11y/no-access-key</BlcCode></BlcLink>\n\n\t> Why? Inconsistencies between keyboard shortcuts and keyboard commands used by people using screenreaders and keyboards complicate accessibility.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<div accessKey=\"h\" />\n\n\t\t// good\n\t\t<div />\n\t`}\n\t</BlcCode>\n\n\t- Avoid using an array index as <BlcCode mdxType=\"BlcCode\">key</BlcCode> prop, prefer a stable ID. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/no-array-index-key</BlcCode></BlcLink>\n\n\t> Why? Not using a stable ID <BlcLink href=\"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\" target=\"_blank\" mdxType=\"BlcLink\">is an anti-pattern</BlcLink> because it can negatively impact performance and cause issues with component state.\n\n\tWe don’t recommend using indexes for keys if the order of items may change.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t{todos.map((todo, index) =>\n\t\t\t<Todo\n\t\t\t\t{...todo}\n\t\t\t\tkey={index}\n\t\t\t/>\n\t\t)}\n\n\t\t// good\n\t\t{todos.map(todo => (\n\t\t\t<Todo\n\t\t\t\t{...todo}\n\t\t\t\tkey={todo.id}\n\t\t\t/>\n\t\t))}\n\t`}\n\t</BlcCode>\n\n\t- Always define explicit defaultProps for all non-required props.\n\n\t> Why? propTypes are a form of documentation, and providing defaultProps means the reader of your code doesn’t have to assume as much. In addition, it can mean that your code can omit certain type checks.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\tfunction SFC({ foo, bar, children }) {\n\t\t\treturn <div>{foo}{bar}{children}</div>;\n\t\t}\n\t\tSFC.propTypes = {\n\t\t\tfoo: PropTypes.number.isRequired,\n\t\t\tbar: PropTypes.string,\n\t\t\tchildren: PropTypes.node,\n\t\t};\n\n\t\t// good\n\t\tfunction SFC({ foo, bar, children }) {\n\t\t\treturn <div>{foo}{bar}{children}</div>;\n\t\t}\n\t\tSFC.propTypes = {\n\t\t\tfoo: PropTypes.number.isRequired,\n\t\t\tbar: PropTypes.string,\n\t\t\tchildren: PropTypes.node,\n\t\t};\n\t\tSFC.defaultProps = {\n\t\t\tbar: '',\n\t\t\tchildren: null,\n\t\t};\n\t`}\n\t</BlcCode>\n\n\t- Use spread props sparingly.\n\t> Why? Otherwise you’re more likely to pass unnecessary props down to components. And for React v15.6.1 and older, you could <BlcLink href=\"https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html\" target=\"_blank\" mdxType=\"BlcLink\">pass invalid HTML attributes to the DOM</BlcLink>.\n\n\tExceptions:\n\n\t- HOCs that proxy down props and hoist propTypes\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\tfunction HOC(WrappedComponent) {\n\t\t\treturn class Proxy extends React.Component {\n\t\t\t\tProxy.propTypes = {\n\t\t\t\t\ttext: PropTypes.string,\n\t\t\t\t\tisLoading: PropTypes.bool\n\t\t\t\t};\n\n\t\t\t\trender() {\n\t\t\t\t\treturn <WrappedComponent {...this.props} />\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`}\n\t</BlcCode>\n\n\t- Spreading objects with known, explicit props. This can be particularly useful when testing React components with Mocha’s beforeEach construct.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\texport default function Foo {\n\t\t\tconst props = {\n\t\t\t\ttext: '',\n\t\t\t\tisPublished: false\n\t\t\t}\n\n\t\t\treturn (<div {...props} />);\n\t\t}\n\t`}\n\t</BlcCode>\n\n\tNotes for use:\n\tFilter out unnecessary props when possible. Also, use <BlcLink href=\"https://www.npmjs.com/package/prop-types-exact\" target=\"_blank\" mdxType=\"BlcLink\">prop-types-exact</BlcLink> to help prevent bugs.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\trender() {\n\t\t\tconst { irrelevantProp, ...relevantProps } = this.props;\n\t\t\treturn <WrappedComponent {...this.props} />\n\t\t}\n\n\t\t// good\n\t\trender() {\n\t\t\tconst { irrelevantProp, ...relevantProps } = this.props;\n\t\t\treturn <WrappedComponent {...relevantProps} />\n\t\t}\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Refs</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Always use ref callbacks. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/no-string-refs</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo\n\t\t\tref=\"myRef\"\n\t\t/>\n\n\t\t// good\n\t\t<Foo\n\t\t\tref={(ref) => { this.myRef = ref; }}\n\t\t/>\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Parentheses</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Wrap JSX tags in parentheses when they span more than one line. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-wrap-multilines</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\trender() {\n\t\t\treturn <MyComponent variant=\"long body\" foo=\"bar\">\n\t\t\t\t\t\t<MyChild />\n\t\t\t\t\t</MyComponent>;\n\t\t}\n\n\t\t// good\n\t\trender() {\n\t\t\treturn (\n\t\t\t\t<MyComponent variant=\"long body\" foo=\"bar\">\n\t\t\t\t\t<MyChild />\n\t\t\t\t</MyComponent>\n\t\t\t);\n\t\t}\n\n\t\t// good, when single line\n\t\trender() {\n\t\t\tconst body = <div>hello</div>;\n\t\t\treturn <MyComponent>{body}</MyComponent>;\n\t\t}\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Tags</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Always self-close tags that have no children. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/self-closing-comp</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo variant=\"stuff\"></Foo>\n\n\t\t// good\n\t\t<Foo variant=\"stuff\" />\n\t`}\n\t</BlcCode>\n\n\t- If your component has multi-line properties, close its tag on a new line. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-closing-bracket-location</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\t<Foo\n\t\t\tbar=\"bar\"\n\t\t\tbaz=\"baz\" />\n\n\t\t// good\n\t\t<Foo\n\t\t\tbar=\"bar\"\n\t\t\tbaz=\"baz\"\n\t\t/>\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Methods</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Use arrow functions to close over local variables. It is handy when you need to pass additional data to an event handler. Although, make sure they <BlcLink href=\"https://www.bignerdranch.com/blog/choosing-the-best-approach-for-react-event-handlers/\" target=\"_blank\" mdxType=\"BlcLink\">do not massively hurt performance</BlcLink>, in particular when passed to custom components that might be PureComponents, because they will trigger a possibly needless rerender every time.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\tfunction ItemList(props) {\n\t\t\treturn (\n\t\t\t\t<ul>\n\t\t\t\t\t{props.items.map((item, index) => (\n\t\t\t\t\t\t<Item\n\t\t\t\t\t\t\tkey={item.key}\n\t\t\t\t\t\t\tonClick={(event) => { doSomethingWith(event, item.name, index); }}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t);\n\t\t}\n\t`}\n\t</BlcCode>\n\n\t- Bind event handlers for the render method in the constructor. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/jsx-no-bind</BlcCode></BlcLink>\n\n\t> Why? A bind call in the render path creates a brand new function on every single render. Do not use arrow functions in class fields, because it makes them <BlcLink href=\"https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1\" target=\"_blank\" mdxType=\"BlcLink\">challenging to test and debug, and can negatively impact performance</BlcLink>, and because conceptually, class fields are for data, not logic.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\tclass extends React.Component {\n\t\t\tonClickDiv() {\n\t\t\t\t// do stuff\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\treturn <div onClick={this.onClickDiv.bind(this)} />;\n\t\t\t}\n\t\t}\n\n\t\t// very bad\n\t\tclass extends React.Component {\n\t\t\tonClickDiv = () => {\n\t\t\t\t// do stuff\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\treturn <div onClick={this.onClickDiv} />\n\t\t\t}\n\t\t}\n\n\t\t// good\n\t\tclass extends React.Component {\n\t\t\tconstructor(props) {\n\t\t\t\tsuper(props);\n\n\t\t\t\tthis.onClickDiv = this.onClickDiv.bind(this);\n\t\t\t}\n\n\t\t\tonClickDiv() {\n\t\t\t\t// do stuff\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\treturn <div onClick={this.onClickDiv} />;\n\t\t\t}\n\t\t}\n\t`}\n\t</BlcCode>\n\n\t- Do not use underscore prefix for internal methods of a React component.\n\t> Why? Underscore prefixes are sometimes used as a convention in other languages to denote privacy. But, unlike those languages, there is no native support for privacy in JavaScript, everything is public. Regardless of your intentions, adding underscore prefixes to your properties does not actually make them private, and any property (underscore-prefixed or not) should be treated as being public. See issues <BlcLink href=\"https://github.com/airbnb/javascript/issues/1024\" target=\"_blank\" mdxType=\"BlcLink\">#1024</BlcLink>, and <BlcLink href=\"https://github.com/airbnb/javascript/issues/490\" target=\"_blank\" mdxType=\"BlcLink\">#490</BlcLink> for a more in-depth discussion.\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\tReact.createClass({\n\t\t\t_onClickSubmit() {\n\t\t\t\t// do stuff\n\t\t\t},\n\n\t\t\t// other stuff\n\t\t});\n\n\t\t// good\n\t\tclass extends React.Component {\n\t\t\tonClickSubmit() {\n\t\t\t\t// do stuff\n\t\t\t}\n\n\t\t// other stuff\n\t\t}\n\t`}\n\t</BlcCode>\n\n\t- Be sure to return a value in your <BlcCode mdxType=\"BlcCode\">render</BlcCode> methods. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/require-render-return</BlcCode></BlcLink>\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\t// bad\n\t\trender() {\n\t\t\t(<div />);\n\t\t}\n\n\t\t// good\n\t\trender() {\n\t\t\treturn (<div />);\n\t\t}\n\t`}\n\t</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\">Ordering</BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Ordering for <BlcCode mdxType=\"BlcCode\">class extends React.Component</BlcCode>:\n\n\t1. optional <BlcCode mdxType=\"BlcCode\">static</BlcCode> methods\n\t1. <BlcCode mdxType=\"BlcCode\">constructor</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">getChildContext</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillMount</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentDidMount</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillReceiveProps</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">shouldComponentUpdate</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillUpdate</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentDidUpdate</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillUnmount</BlcCode>\n\t1. <Italic mdxType=\"Italic\">clickHandlers or eventHandlers</Italic> like <BlcCode mdxType=\"BlcCode\">onClickSubmit()</BlcCode> or <BlcCode mdxType=\"BlcCode\">onChangeDescription()</BlcCode>\n\t1. <Italic mdxType=\"Italic\">getter methods for <BlcCode mdxType=\"BlcCode\">render</BlcCode></Italic> like <BlcCode mdxType=\"BlcCode\">getSelectReason()</BlcCode> or <BlcCode mdxType=\"BlcCode\">getFooterContent()</BlcCode>\n\t1. <Italic mdxType=\"Italic\">optional render methods</Italic> like <BlcCode mdxType=\"BlcCode\">renderNavigation()</BlcCode> or <BlcCode mdxType=\"BlcCode\">renderProfilePicture()</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">render</BlcCode>\n\n\n\t- How to define <BlcCode mdxType=\"BlcCode\">propTypes</BlcCode>, <BlcCode mdxType=\"BlcCode\">defaultProps</BlcCode>, <BlcCode mdxType=\"BlcCode\">contextTypes</BlcCode>, etc...\n\n\t<BlcCode mdxType=\"BlcCode\">\n\t{`\n\t\timport React from 'react';\n\t\timport PropTypes from 'prop-types';\n\n\t\tconst propTypes = {\n\t\t\tid: PropTypes.number.isRequired,\n\t\t\turl: PropTypes.string.isRequired,\n\t\t\ttext: PropTypes.string,\n\t\t};\n\n\t\tconst defaultProps = {\n\t\t\ttext: 'Hello World',\n\t\t};\n\n\t\tclass Link extends React.Component {\n\t\t\tstatic methodsAreOk() {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\treturn <a href={this.props.url} data-id={this.props.id}>{this.props.text}</a>;\n\t\t\t}\n\t\t}\n\n\t\tLink.propTypes = propTypes;\n\t\tLink.defaultProps = defaultProps;\n\n\t\texport default Link;\n\t`}\n\t</BlcCode>\n\n\t- Ordering for <BlcCode mdxType=\"BlcCode\">React.createClass</BlcCode>: eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/sort-comp</BlcCode></BlcLink>\n\n\t1. <BlcCode mdxType=\"BlcCode\">displayName</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">propTypes</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">contextTypes</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">childContextTypes</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">mixins</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">statics</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">defaultProps</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">getDefaultProps</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">getInitialState</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">getChildContext</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillMount</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentDidMount</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillReceiveProps</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">shouldComponentUpdate</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillUpdate</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentDidUpdate</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">componentWillUnmount</BlcCode>\n\t1. <Italic mdxType=\"Italic\">clickHandlers or eventHandlers</Italic> like <BlcCode mdxType=\"BlcCode\">onClickSubmit()</BlcCode> or <BlcCode mdxType=\"BlcCode\">onChangeDescription()</BlcCode>\n\t1. <Italic mdxType=\"Italic\">getter methods for <BlcCode mdxType=\"BlcCode\">render</BlcCode></Italic> like <BlcCode mdxType=\"BlcCode\">getSelectReason()</BlcCode> or <BlcCode mdxType=\"BlcCode\">getFooterContent()</BlcCode>\n\t1. <Italic mdxType=\"Italic\">optional render methods</Italic> like <BlcCode mdxType=\"BlcCode\">renderNavigation()</BlcCode> or <BlcCode mdxType=\"BlcCode\">renderProfilePicture()</BlcCode>\n\t1. <BlcCode mdxType=\"BlcCode\">render</BlcCode>\n      </BlcParagraph>\n\n      <BlcH6 margin={size.marginSmallest} mdxType=\"BlcH6\"><BlcCode mdxType=\"BlcCode\">isMounted</BlcCode></BlcH6>\n\n      <BlcParagraph mdxType=\"BlcParagraph\">\n\t- Do not use <BlcCode mdxType=\"BlcCode\">isMounted</BlcCode>. eslint: <BlcLink href=\"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">react/no-is-mounted</BlcCode></BlcLink>\n\n\t> Why? <BlcLink href=\"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\" target=\"_blank\" mdxType=\"BlcLink\"><BlcCode mdxType=\"BlcCode\">isMounted</BlcCode> is an anti-pattern</BlcLink>, is not available when using ES6 classes, and is on its way to being officially deprecated.\n      </BlcParagraph>\n    </BlcContainer>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}