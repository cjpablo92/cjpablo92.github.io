{"version":3,"sources":["webpack:///../pages/styleguide/code-guidelines.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---pages-styleguide-code-guidelines-mdx-d0386e021d1b7c555b77.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/cjpablo/Backlot/webapp/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"code-guidelines\"\n    }}>{`Code guidelines`}</h1>\n    <p>{`As BacklotCars continues to grow, both as a product and a company, one challenge we are faced with is learning how to refine the code quality and apply it cohesively to each of our products. We created this code guidelines to act as a central location where we store all the data collected, code snippets, developer tips and more. Anyone working on the BacklotCars products is encouraged to stay familiar with this styleguide and help ensure that it is kept up-to-date.`}</p>\n    <h4 {...{\n      \"id\": \"airbnb-reactjsx-style-guide\"\n    }}>{`Airbnb React/JSX Style Guide`}</h4>\n    <p><em parentName=\"p\">{`A mostly reasonable approach to React and JSX`}</em></p>\n    <p>{`This style guide is mostly based on the standards that are currently prevalent in JavaScript, although some conventions (i.e async/await or static class fields) may still be included or prohibited on a case-by-case basis. Currently, anything prior to stage 3 is not included nor recommended in this guide.`}</p>\n    <h5 {...{\n      \"id\": \"table-of-contents\"\n    }}>{`Table of Contents`}</h5>\n    <ol>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#basic-rules\"\n        }}>{`Basic Rules`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#class-vs-reactcreateclass-vs-stateless\"\n        }}>{`Class vs `}<inlineCode parentName=\"a\">{`React.createClass`}</inlineCode>{` vs stateless`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#mixins\"\n        }}>{`Mixins`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#naming\"\n        }}>{`Naming`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#declaration\"\n        }}>{`Declaration`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#alignment\"\n        }}>{`Alignment`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#quotes\"\n        }}>{`Quotes`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#spacing\"\n        }}>{`Spacing`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#props\"\n        }}>{`Props`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#refs\"\n        }}>{`Refs`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#parentheses\"\n        }}>{`Parentheses`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#tags\"\n        }}>{`Tags`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#methods\"\n        }}>{`Methods`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#ordering\"\n        }}>{`Ordering`}</a></li>\n      <li parentName=\"ol\"><a parentName=\"li\" {...{\n          \"href\": \"#ismounted\"\n        }}><inlineCode parentName=\"a\">{`isMounted`}</inlineCode></a></li>\n    </ol>\n    <h5 {...{\n      \"id\": \"basic-rules\"\n    }}>{`Basic Rules`}</h5>\n    <ul>\n      <li parentName=\"ul\">{`Only include one React component per file.`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`However, multiple `}<a parentName=\"li\" {...{\n              \"href\": \"https://facebook.github.io/react/docs/reusable-components.html#stateless-functions\"\n            }}>{`Stateless, or Pure, Components`}</a>{` are allowed per file. eslint: `}<a parentName=\"li\" {...{\n              \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md#ignorestateless\"\n            }}><inlineCode parentName=\"a\">{`react/no-multi-comp`}</inlineCode></a>{`.`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Always use JSX syntax.`}</li>\n      <li parentName=\"ul\">{`Do not use `}<inlineCode parentName=\"li\">{`React.createElement`}</inlineCode>{` unless you’re initializing the app from a file that is not JSX.`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/forbid-prop-types.md\"\n        }}><inlineCode parentName=\"a\">{`react/forbid-prop-types`}</inlineCode></a>{` will allow `}<inlineCode parentName=\"li\">{`arrays`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`objects`}</inlineCode>{` only if it is explicitly noted what `}<inlineCode parentName=\"li\">{`array`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`object`}</inlineCode>{` contains, using `}<inlineCode parentName=\"li\">{`arrayOf`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`objectOf`}</inlineCode>{`, or `}<inlineCode parentName=\"li\">{`shape`}</inlineCode>{`.`}</li>\n    </ul>\n    <h5 {...{\n      \"id\": \"class-vs-reactcreateclass-vs-stateless\"\n    }}>{`Class vs `}<inlineCode parentName=\"h5\">{`React.createClass`}</inlineCode>{` vs stateless`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If you have internal state and/or refs, prefer `}<inlineCode parentName=\"p\">{`class extends React.Component`}</inlineCode>{` over `}<inlineCode parentName=\"p\">{`React.createClass`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-es6-class.md\"\n          }}><inlineCode parentName=\"a\">{`react/prefer-es6-class`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/prefer-stateless-function.md\"\n          }}><inlineCode parentName=\"a\">{`react/prefer-stateless-function`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nconst Listing = React.createClass({\n  // ...\n  render() {\n    return <div>{this.state.hello}</div>;\n  }\n});\n\n// good\nclass Listing extends React.Component {\n  // ...\n  render() {\n    return <div>{this.state.hello}</div>;\n  }\n}\n`}</code></pre>\n        <p parentName=\"li\">{`And if you don’t have state or refs, prefer normal functions (not arrow functions) over classes:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nclass Listing extends React.Component {\n  render() {\n    return <div>{this.props.hello}</div>;\n  }\n}\n\n// bad (relying on function name inference is discouraged)\nconst Listing = ({ hello }) => (\n  <div>{hello}</div>\n);\n\n// good\nfunction Listing({ hello }) {\n  return <div>{hello}</div>;\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"mixins\"\n    }}>{`Mixins`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><a parentName=\"p\" {...{\n            \"href\": \"https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html\"\n          }}>{`Do not use mixins`}</a>{`.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? Mixins introduce implicit dependencies, cause name clashes, and cause snowballing complexity. Most use cases for mixins can be accomplished in better ways via components, higher-order components, or utility modules.`}</p>\n        </blockquote>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"naming\"\n    }}>{`Naming`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Extensions`}</strong>{`: Use `}<inlineCode parentName=\"p\">{`.jsx`}</inlineCode>{` extension for React components. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-filename-extension.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-filename-extension`}</inlineCode></a></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Filename`}</strong>{`: Use PascalCase for filenames. E.g., `}<inlineCode parentName=\"p\">{`ReservationCard.jsx`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Reference Naming`}</strong>{`: Use PascalCase for React components and camelCase for their instances. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-pascal-case.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-pascal-case`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nimport reservationCard from './ReservationCard';\n\n// good\nimport ReservationCard from './ReservationCard';\n\n// bad\nconst ReservationItem = <ReservationCard />;\n\n// good\nconst reservationItem = <ReservationCard />;\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Component Naming`}</strong>{`: Use the filename as the component name. For example, `}<inlineCode parentName=\"p\">{`ReservationCard.jsx`}</inlineCode>{` should have a reference name of `}<inlineCode parentName=\"p\">{`ReservationCard`}</inlineCode>{`. However, for root components of a directory, use `}<inlineCode parentName=\"p\">{`index.jsx`}</inlineCode>{` as the filename and use the directory name as the component name:`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nimport Footer from './Footer/Footer';\n\n// bad\nimport Footer from './Footer/index';\n\n// good\nimport Footer from './Footer';\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Higher-order Component Naming`}</strong>{`: Use a composite of the higher-order component’s name and the passed-in component’s name as the `}<inlineCode parentName=\"p\">{`displayName`}</inlineCode>{` on the generated component. For example, the higher-order component `}<inlineCode parentName=\"p\">{`withFoo()`}</inlineCode>{`, when passed a component `}<inlineCode parentName=\"p\">{`Bar`}</inlineCode>{` should produce a component with a `}<inlineCode parentName=\"p\">{`displayName`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`withFoo(Bar)`}</inlineCode>{`.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? A component’s `}<inlineCode parentName=\"p\">{`displayName`}</inlineCode>{` may be used by developer tools or in error messages, and having a value that clearly expresses this relationship helps people understand what is happening.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nexport default function withFoo(WrappedComponent) {\n  return function WithFoo(props) {\n    return <WrappedComponent {...props} foo />;\n  }\n}\n\n// good\nexport default function withFoo(WrappedComponent) {\n  function WithFoo(props) {\n    return <WrappedComponent {...props} foo />;\n  }\n\n  const wrappedComponentName = WrappedComponent.displayName\n    || WrappedComponent.name\n    || 'Component';\n\n  WithFoo.displayName = \\`withFoo(\\${wrappedComponentName})\\`;\n  return WithFoo;\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Props Naming`}</strong>{`: Avoid using DOM component prop names for different purposes.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? People expect props like `}<inlineCode parentName=\"p\">{`style`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`className`}</inlineCode>{` to mean one specific thing. Varying this API for a subset of your app makes the code less readable and less maintainable, and may cause bugs.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<MyComponent style=\"fancy\" />\n\n// bad\n<MyComponent className=\"fancy\" />\n\n// good\n<MyComponent variant=\"fancy\" />\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"declaration\"\n    }}>{`Declaration`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do not use `}<inlineCode parentName=\"p\">{`displayName`}</inlineCode>{` for naming components. Instead, name the component by reference.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nexport default React.createClass({\n  displayName: 'ReservationCard',\n  // stuff goes here\n});\n\n// good\nexport default class ReservationCard extends React.Component {\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"alignment\"\n    }}>{`Alignment`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Follow these alignment styles for JSX syntax. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-closing-bracket-location`}</inlineCode></a>{` `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-tag-location.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-closing-tag-location`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo superLongParam=\"bar\"\n     anotherSuperLongParam=\"baz\" />\n\n// good\n<Foo\n  superLongParam=\"bar\"\n  anotherSuperLongParam=\"baz\"\n/>\n\n// if props fit in one line then keep it on the same line\n<Foo bar=\"bar\" />\n\n// children get indented normally\n<Foo\n  superLongParam=\"bar\"\n  anotherSuperLongParam=\"baz\"\n>\n  <Quux />\n</Foo>\n\n// bad\n{showButton &&\n  <Button />\n}\n\n// bad\n{\n  showButton &&\n    <Button />\n}\n\n// good\n{showButton && (\n  <Button />\n)}\n\n// good\n{showButton && <Button />}\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"quotes\"\n    }}>{`Quotes`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always use double quotes (`}<inlineCode parentName=\"p\">{`\"`}</inlineCode>{`) for JSX attributes, but single quotes (`}<inlineCode parentName=\"p\">{`'`}</inlineCode>{`) for all other JS. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://eslint.org/docs/rules/jsx-quotes\"\n          }}><inlineCode parentName=\"a\">{`jsx-quotes`}</inlineCode></a></p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo bar='bar' />\n\n// good\n<Foo bar=\"bar\" />\n\n// bad\n<Foo style={{ left: \"20px\" }} />\n\n// good\n<Foo style={{ left: '20px' }} />\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"spacing\"\n    }}>{`Spacing`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always include a single space in your self-closing tag. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://eslint.org/docs/rules/no-multi-spaces\"\n          }}><inlineCode parentName=\"a\">{`no-multi-spaces`}</inlineCode></a>{`, `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-tag-spacing.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-tag-spacing`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo/>\n\n// very bad\n<Foo                 />\n\n// bad\n<Foo\n />\n\n// good\n<Foo />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do not pad JSX curly braces with spaces. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-curly-spacing.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-curly-spacing`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo bar={ baz } />\n\n// good\n<Foo bar={baz} />\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always use camelCase for prop names.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo\n  UserName=\"hello\"\n  phone_number={12345678}\n/>\n\n// good\n<Foo\n  userName=\"hello\"\n  phoneNumber={12345678}\n/>\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Omit the value of the prop when it is explicitly `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-boolean-value.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-boolean-value`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo\n  hidden={true}\n/>\n\n// good\n<Foo\n  hidden\n/>\n\n// good\n<Foo hidden />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always include an `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` prop on `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` tags. If the image is presentational, `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` can be an empty string or the `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` must have `}<inlineCode parentName=\"p\">{`role=\"presentation\"`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/alt-text.md\"\n          }}><inlineCode parentName=\"a\">{`jsx-a11y/alt-text`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<img src=\"hello.jpg\" />\n\n// good\n<img src=\"hello.jpg\" alt=\"Me waving hello\" />\n\n// good\n<img src=\"hello.jpg\" alt=\"\" />\n\n// good\n<img src=\"hello.jpg\" role=\"presentation\" />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do not use words like \"image\", \"photo\", or \"picture\" in `}<inlineCode parentName=\"p\">{`<img>`}</inlineCode>{` `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` props. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/img-redundant-alt.md\"\n          }}><inlineCode parentName=\"a\">{`jsx-a11y/img-redundant-alt`}</inlineCode></a></p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? Screenreaders already announce `}<inlineCode parentName=\"p\">{`img`}</inlineCode>{` elements as images, so there is no need to include this information in the alt text.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<img src=\"hello.jpg\" alt=\"Picture of me waving hello\" />\n\n// good\n<img src=\"hello.jpg\" alt=\"Me waving hello\" />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use only valid, non-abstract `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.w3.org/TR/wai-aria/#usage_intro\"\n          }}>{`ARIA roles`}</a>{`. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/aria-role.md\"\n          }}><inlineCode parentName=\"a\">{`jsx-a11y/aria-role`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad - not an ARIA role\n<div role=\"datepicker\" />\n\n// bad - abstract ARIA role\n<div role=\"range\" />\n\n// good\n<div role=\"button\" />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do not use `}<inlineCode parentName=\"p\">{`accessKey`}</inlineCode>{` on elements. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-access-key.md\"\n          }}><inlineCode parentName=\"a\">{`jsx-a11y/no-access-key`}</inlineCode></a></p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? Inconsistencies between keyboard shortcuts and keyboard commands used by people using screenreaders and keyboards complicate accessibility.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<div accessKey=\"h\" />\n\n// good\n<div />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Avoid using an array index as `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` prop, prefer a stable ID. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-array-index-key.md\"\n          }}><inlineCode parentName=\"a\">{`react/no-array-index-key`}</inlineCode></a></p>\n      </li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Why? Not using a stable ID `}<a parentName=\"p\" {...{\n          \"href\": \"https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318\"\n        }}>{`is an anti-pattern`}</a>{` because it can negatively impact performance and cause issues with component state.`}</p>\n    </blockquote>\n    <p>{`We don’t recommend using indexes for keys if the order of items may change.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// bad\n{todos.map((todo, index) =>\n  <Todo\n    {...todo}\n    key={index}\n  />\n)}\n\n// good\n{todos.map(todo => (\n  <Todo\n    {...todo}\n    key={todo.id}\n  />\n))}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always define explicit defaultProps for all non-required props.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? propTypes are a form of documentation, and providing defaultProps means the reader of your code doesn’t have to assume as much. In addition, it can mean that your code can omit certain type checks.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nfunction SFC({ foo, bar, children }) {\n  return <div>{foo}{bar}{children}</div>;\n}\nSFC.propTypes = {\n  foo: PropTypes.number.isRequired,\n  bar: PropTypes.string,\n  children: PropTypes.node,\n};\n\n// good\nfunction SFC({ foo, bar, children }) {\n  return <div>{foo}{bar}{children}</div>;\n}\nSFC.propTypes = {\n  foo: PropTypes.number.isRequired,\n  bar: PropTypes.string,\n  children: PropTypes.node,\n};\nSFC.defaultProps = {\n  bar: '',\n  children: null,\n};\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use spread props sparingly.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? Otherwise you’re more likely to pass unnecessary props down to components. And for React v15.6.1 and older, you could `}<a parentName=\"p\" {...{\n              \"href\": \"https://reactjs.org/blog/2017/09/08/dom-attributes-in-react-16.html\"\n            }}>{`pass invalid HTML attributes to the DOM`}</a>{`.`}</p>\n        </blockquote>\n        <p parentName=\"li\">{`Exceptions:`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`HOCs that proxy down props and hoist propTypes`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`function HOC(WrappedComponent) {\n  return class Proxy extends React.Component {\n    Proxy.propTypes = {\n      text: PropTypes.string,\n      isLoading: PropTypes.bool\n    };\n\n    render() {\n      return <WrappedComponent {...this.props} />\n    }\n  }\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Spreading objects with known, explicit props. This can be particularly useful when testing React components with Mocha’s beforeEach construct.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`export default function Foo {\n  const props = {\n    text: '',\n    isPublished: false\n  }\n\n  return (<div {...props} />);\n}\n`}</code></pre>\n        <p parentName=\"li\">{`Notes for use:\nFilter out unnecessary props when possible. Also, use `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.npmjs.com/package/prop-types-exact\"\n          }}>{`prop-types-exact`}</a>{` to help prevent bugs.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nrender() {\n  const { irrelevantProp, ...relevantProps } = this.props;\n  return <WrappedComponent {...this.props} />\n}\n\n// good\nrender() {\n  const { irrelevantProp, ...relevantProps } = this.props;\n  return <WrappedComponent {...relevantProps} />\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"refs\"\n    }}>{`Refs`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always use ref callbacks. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-string-refs.md\"\n          }}><inlineCode parentName=\"a\">{`react/no-string-refs`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo\n  ref=\"myRef\"\n/>\n\n// good\n<Foo\n  ref={(ref) => { this.myRef = ref; }}\n/>\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"parentheses\"\n    }}>{`Parentheses`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Wrap JSX tags in parentheses when they span more than one line. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-wrap-multilines.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-wrap-multilines`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nrender() {\n  return <MyComponent variant=\"long body\" foo=\"bar\">\n           <MyChild />\n         </MyComponent>;\n}\n\n// good\nrender() {\n  return (\n    <MyComponent variant=\"long body\" foo=\"bar\">\n      <MyChild />\n    </MyComponent>\n  );\n}\n\n// good, when single line\nrender() {\n  const body = <div>hello</div>;\n  return <MyComponent>{body}</MyComponent>;\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"tags\"\n    }}>{`Tags`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Always self-close tags that have no children. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/self-closing-comp.md\"\n          }}><inlineCode parentName=\"a\">{`react/self-closing-comp`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo variant=\"stuff\"></Foo>\n\n// good\n<Foo variant=\"stuff\" />\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If your component has multi-line properties, close its tag on a new line. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-closing-bracket-location.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-closing-bracket-location`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\n<Foo\n  bar=\"bar\"\n  baz=\"baz\" />\n\n// good\n<Foo\n  bar=\"bar\"\n  baz=\"baz\"\n/>\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use arrow functions to close over local variables. It is handy when you need to pass additional data to an event handler. Although, make sure they `}<a parentName=\"p\" {...{\n            \"href\": \"https://www.bignerdranch.com/blog/choosing-the-best-approach-for-react-event-handlers/\"\n          }}>{`do not massively hurt performance`}</a>{`, in particular when passed to custom components that might be PureComponents, because they will trigger a possibly needless rerender every time.`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`function ItemList(props) {\n  return (\n    <ul>\n      {props.items.map((item, index) => (\n        <Item\n          key={item.key}\n          onClick={(event) => { doSomethingWith(event, item.name, index); }}\n        />\n      ))}\n    </ul>\n  );\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Bind event handlers for the render method in the constructor. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-bind.md\"\n          }}><inlineCode parentName=\"a\">{`react/jsx-no-bind`}</inlineCode></a></p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? A bind call in the render path creates a brand new function on every single render. Do not use arrow functions in class fields, because it makes them `}<a parentName=\"p\" {...{\n              \"href\": \"https://medium.com/@charpeni/arrow-functions-in-class-properties-might-not-be-as-great-as-we-think-3b3551c440b1\"\n            }}>{`challenging to test and debug, and can negatively impact performance`}</a>{`, and because conceptually, class fields are for data, not logic.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nclass extends React.Component {\n  onClickDiv() {\n    // do stuff\n  }\n\n  render() {\n    return <div onClick={this.onClickDiv.bind(this)} />;\n  }\n}\n\n// very bad\nclass extends React.Component {\n  onClickDiv = () => {\n    // do stuff\n  }\n\n  render() {\n    return <div onClick={this.onClickDiv} />\n  }\n}\n\n// good\nclass extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickDiv = this.onClickDiv.bind(this);\n  }\n\n  onClickDiv() {\n    // do stuff\n  }\n\n  render() {\n    return <div onClick={this.onClickDiv} />;\n  }\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do not use underscore prefix for internal methods of a React component.`}</p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? Underscore prefixes are sometimes used as a convention in other languages to denote privacy. But, unlike those languages, there is no native support for privacy in JavaScript, everything is public. Regardless of your intentions, adding underscore prefixes to your properties does not actually make them private, and any property (underscore-prefixed or not) should be treated as being public. See issues `}<a parentName=\"p\" {...{\n              \"href\": \"https://github.com/airbnb/javascript/issues/1024\"\n            }}>{`#1024`}</a>{`, and `}<a parentName=\"p\" {...{\n              \"href\": \"https://github.com/airbnb/javascript/issues/490\"\n            }}>{`#490`}</a>{` for a more in-depth discussion.`}</p>\n        </blockquote>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nReact.createClass({\n  _onClickSubmit() {\n    // do stuff\n  },\n\n  // other stuff\n});\n\n// good\nclass extends React.Component {\n  onClickSubmit() {\n    // do stuff\n  }\n\n  // other stuff\n}\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Be sure to return a value in your `}<inlineCode parentName=\"p\">{`render`}</inlineCode>{` methods. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/require-render-return.md\"\n          }}><inlineCode parentName=\"a\">{`react/require-render-return`}</inlineCode></a></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`// bad\nrender() {\n  (<div />);\n}\n\n// good\nrender() {\n  return (<div />);\n}\n`}</code></pre>\n      </li>\n    </ul>\n    <h5 {...{\n      \"id\": \"ordering\"\n    }}>{`Ordering`}</h5>\n    <ul>\n      <li parentName=\"ul\">{`Ordering for `}<inlineCode parentName=\"li\">{`class extends React.Component`}</inlineCode>{`:`}</li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\">{`optional `}<inlineCode parentName=\"li\">{`static`}</inlineCode>{` methods`}</li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`constructor`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`getChildContext`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentDidMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillReceiveProps`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`shouldComponentUpdate`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillUpdate`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentDidUpdate`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillUnmount`}</inlineCode></li>\n      <li parentName=\"ol\"><em parentName=\"li\">{`clickHandlers or eventHandlers`}</em>{` like `}<inlineCode parentName=\"li\">{`onClickSubmit()`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`onChangeDescription()`}</inlineCode></li>\n      <li parentName=\"ol\"><em parentName=\"li\">{`getter methods for `}<inlineCode parentName=\"em\">{`render`}</inlineCode></em>{` like `}<inlineCode parentName=\"li\">{`getSelectReason()`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`getFooterContent()`}</inlineCode></li>\n      <li parentName=\"ol\"><em parentName=\"li\">{`optional render methods`}</em>{` like `}<inlineCode parentName=\"li\">{`renderNavigation()`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`renderProfilePicture()`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`render`}</inlineCode></li>\n    </ol>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`How to define `}<inlineCode parentName=\"p\">{`propTypes`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`defaultProps`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`contextTypes`}</inlineCode>{`, etc...`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-jsx\"\n          }}>{`import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  id: PropTypes.number.isRequired,\n  url: PropTypes.string.isRequired,\n  text: PropTypes.string,\n};\n\nconst defaultProps = {\n  text: 'Hello World',\n};\n\nclass Link extends React.Component {\n  static methodsAreOk() {\n    return true;\n  }\n\n  render() {\n    return <a href={this.props.url} data-id={this.props.id}>{this.props.text}</a>;\n  }\n}\n\nLink.propTypes = propTypes;\nLink.defaultProps = defaultProps;\n\nexport default Link;\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Ordering for `}<inlineCode parentName=\"p\">{`React.createClass`}</inlineCode>{`: eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/sort-comp.md\"\n          }}><inlineCode parentName=\"a\">{`react/sort-comp`}</inlineCode></a></p>\n      </li>\n    </ul>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`displayName`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`propTypes`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`contextTypes`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`childContextTypes`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`mixins`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`statics`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`defaultProps`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`getDefaultProps`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`getInitialState`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`getChildContext`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentDidMount`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillReceiveProps`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`shouldComponentUpdate`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillUpdate`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentDidUpdate`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`componentWillUnmount`}</inlineCode></li>\n      <li parentName=\"ol\"><em parentName=\"li\">{`clickHandlers or eventHandlers`}</em>{` like `}<inlineCode parentName=\"li\">{`onClickSubmit()`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`onChangeDescription()`}</inlineCode></li>\n      <li parentName=\"ol\"><em parentName=\"li\">{`getter methods for `}<inlineCode parentName=\"em\">{`render`}</inlineCode></em>{` like `}<inlineCode parentName=\"li\">{`getSelectReason()`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`getFooterContent()`}</inlineCode></li>\n      <li parentName=\"ol\"><em parentName=\"li\">{`optional render methods`}</em>{` like `}<inlineCode parentName=\"li\">{`renderNavigation()`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`renderProfilePicture()`}</inlineCode></li>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`render`}</inlineCode></li>\n    </ol>\n    <h5 {...{\n      \"id\": \"ismounted\"\n    }}><inlineCode parentName=\"h5\">{`isMounted`}</inlineCode></h5>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do not use `}<inlineCode parentName=\"p\">{`isMounted`}</inlineCode>{`. eslint: `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-is-mounted.md\"\n          }}><inlineCode parentName=\"a\">{`react/no-is-mounted`}</inlineCode></a></p>\n        <blockquote parentName=\"li\">\n          <p parentName=\"blockquote\">{`Why? `}<a parentName=\"p\" {...{\n              \"href\": \"https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html\"\n            }}><inlineCode parentName=\"a\">{`isMounted`}</inlineCode>{` is an anti-pattern`}</a>{`, is not available when using ES6 classes, and is on its way to being officially deprecated.`}</p>\n        </blockquote>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}